# 	///////////////////////////////////////////////////////////
# 	Словари (dict). ///////////////////////////////////////////

# 	Неупорядоченные коллекции произвольных объектов с доступом 
#	по ключу. 

# 	- Их иногда ещё называют ассоциативными массивами или 
#	  хеш-таблицами.

# 	- Что же можно делать со словарями? То же самое, что и с  
# 	  другими объектами: встроенные функции, ключевые слова 
#	  (например, циклы for и while), а также специальные методы 
# 	  словарей.

	d = {} 			# создаём словарь с помощью литерала

	d = dict() 		# создание словаря с помошью метода dict()

	d = dict.fromkeys(['a', 'b'], 100)   # с помощью метода fromkeys()
	d 	# {'a': 100, 'b': 100}

	x = {a: a ** 2 for a in range(7)} 	# создание с помощью генератора
	x	 # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}

	tel = {'jack': 4098, 'sape': 4139}
	tel['guido'] = 4127
	tel		# {'sape': 4139, 'guido': 4127, 'jack': 4098}
	tel['jack'] 	# 4098	
	del tel['sape']
	tel['irv'] = 4127
	tel		# {'guido': 4127, 'irv': 4127, 'jack': 4098}


# 	методы работы со словарём //////////////////////////////////

	dict.clear()	# очищает словарь.

	dict.copy()		# возвращает копию словаря.

	dict.items()	# возвращает пары (ключ, значение).

	dict.keys()		# возвращает ключи в словаре.
	
	dict.popitem()	# удаляет и возвращает пару (ключ, значение). 
					# Если словарь пуст, бросает исключение KeyError. 
					# Помните, что словари неупорядочены.

	dict.values()	# возвращает значения в словаре.

	dict.update([other])	# обновляет словарь, добавляя пары 
							# (ключ, значение) из other. Существующие 
							# ключи перезаписываются. Возвращает None 
							# (не новый словарь!).

	classmethod dict.fromkeys(seq[, value])	# создает словарь с ключами 
											# из seq и значением value 
											# (по умолчанию None).

	dict.get(key[, default])	# возвращает значение ключа, но если его 
								# нет, не бросает исключение, а возвращает 
								# default (по умолчанию None).

	dict.pop(key[, default])	# удаляет ключ и возвращает значение. 
								# Если ключа нет, возвращает default 
								# (по умолчанию бросает исключение).

	dict.setdefault(key[, default])	# возвращает значение ключа, но если 
									# его нет, не бросает исключение, а 
									# создает ключ с значением default 
									# (по умолчанию None).