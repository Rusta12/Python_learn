#	Вкратце об Python ::::::::::::::::::::::::::::::::::::::::::::::::::

1. 	# Интерпретатор Python – это программа, которая выполняет программы 
	# на языке Python.

2.	# Исходный программный код – это инструкции, составляющие программу. 
	# Он состоит из текста в  текстовых файлах, имена которых обычно 
	# имеют расширение .py.

3.	# Байт-код – это низкоуровневое представление программы после ее 
	# компиляции. Python автоматически сохраняет полученный байт-код в 
	# файлах с расширением .pyc.

4.	# PVM  – это Python Virtual Machine (виртуальная машина Python) – 
	# механизм Python, который интерпретирует компилированный программный 
	# код.

5.	# Psyco, Shedskin и фиксированные двоичные файлы – все это 
	# разновидности модели выполнения.

6.	# CPython – это стандартная реализация языка. Jython и IronPython 
	# реализуют поддержку программирования на языке Python в  среде Java и 
	# .NET соответственно; они являются альтернативными компиляторами языка 
	# Python.

7.	# К базовым типам объектов (данных) относятся числа, строки, списки, 
	# словари, кортежи, файлы и множества. Cами типы, None и логические 
	# значения также иногда относят к базовым типам. Существует несколько 
	# типов чисел (целые, вещественные, комплексные, рациональные и  
	# фиксированной точности) и несколько типов строк (обычные и в кодировке 
	# Юникод – в Python 2.X; текстовые строки и строки байтов – в Python 3.0).

8.	# Базовыми типами они называются потому, что являются частью самого языка 
	# Python и могут быть использованы в любой момент. Чтобы создать объект 
	# какого-либо другого типа, обычно бывает необходимо обращаться к функции 
	# из импортированного модуля. Для большинства базовых типов предусмотрен 
	# специальный синтаксис создания объектов, например ‘spam’, – это выражение, 
	# создающее строку и определяющее набор операций, которые могут применяться 
	# к ней. Вследствие этого базовые типы жестко вшиты в синтаксис языка Python. 
	# Единственное отличие – объекты-файлы, для создания которых необходимо 
	# вызывать функцию open.

9.	# «Неизменяемый» объект – это объект, который невозможно изменить после того, 
	# как он будет создан. К этой категории объектов относятся числа, строки и  
	# кортежи. Но даже при том, что вы не можете изменить «неизменяемый» объект 
	# на месте, вы всегда можете создать вместо него новый объект, выполнив 
	# выражение.

10.	# «Последовательность» – это упорядоченная по местоположению коллекция 
	# объектов. К последовательностям относятся строки, списки и кортежи. Ко всем 
	# этим типам могут применяться операции, общие для всех последовательностей, 
	# такие как обращение к элементам по их индексам, конкатенация и получение 
	# срезов. Но помимо этого каждый из этих типов имеет ряд специфичных методов.

11.	# Под термином «отображение» подразумевается объект, который отображает ключи 
	# на ассоциированные с ними значения. Единственный базовый тип данных в языке 
	# Python, который является отображением,  – это словарь. Отображения не 
	# подразумевают упорядочение элементов по их позиции, но они поддерживают 
	# возможность доступа к элементам по ключу, плюс ряд специфичных методов.

12.	# «Полиморфизм» означает, что фактически выполняемая операция (такая как +) 
	# зависит от объектов, которые принимают в  ней участие. В  языке Python идея 
	# полиморфизма составляет ключевую концепцию (пожалуй, самую ключевую) – она 
	# не ограничивает применимость программного кода каким-то определенным типом 
	# данных, благодаря чему этот код обычно в состоянии автоматически обрабатывать 
	# объекты самых разных типов.

13. # Говоря простым языком, перегрузка операторов позволяет объектам, созданным из 
	# классов, перехватывать и  участвовать в  операциях, которые применяются к  
	# встроенным типам: сложение, получение среза, вывод, квалификация имен и  так 
	# далее. По большей части это автоматический механизм: при выполнении выражений 
	# и других встроенных операций интерпретатор передает управление реализации 
	# классов.

