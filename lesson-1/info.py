# ////////////////////////////////////////////////////////
# Строки /////////////////////////////////////////////////

# упорядоченные последовательности символов, используемые 
# для хранения и представления текстовой информации, 
# поэтому с помощью строк можно работать со всем, что 
# может быть представлено в текстовой форме.

# для длиного текста применяются ('''example''')
test = '''jwejwegr 2364527 sdjfhgsjdf
 		5142315341341 764524726425273
 		jsdfhgsjfgsjsfdhsdfhsdfgjshsj
 	   '''

# Форматирование строк. //////////////////////////////////
# Иногда возникают ситуации, когда нужно сделать строку, 
# подставив в неё некоторые данные, полученные в процессе 
# выполнения программы (пользовательский ввод, данные 
# из файлов и т. д.). Подстановку данных можно сделать 
# с помощью форматирования строк. Форматирование можно сделать 
# с помощью оператора %, либо с помощью метода format.

	import random

	test0 = random.randrange(1, 3)
	test1 = 'jhdjf'
	test2 = 2
	test3 = len(test1)

	print("test: {test[0]}".format(test = [test0, test1, test2, test3]))
	print('{2},{0},{1}'.format('a', 'b', 'c'))

	print('{:>30}'.format('right align'))
	print('{:^30}'.format('center'))

	points = 19.5
	total = 22

	print('test: {:.2%}'.format(points/total))

# Методы работы со строками. /////////////////////////////
print(len(test)) 			# длина строки
print(test[27])				# обращение по индексу
print(test[3:8])			# делаем срез по индексу от, до
print(test[1:27:2])			# делаем срез с шагом
print(test.isdigit())		# состоит ли строка из цифр
print(test.isalpha())		# состоит ли строка из букв
print(test.isalnum())		# состоит ли строка из цифр и букв
print(test.islower())		# сотсоит ли строка из символов в нижнем регистре
print(test.isupper())		# состоит ли строка из символов в верхнем регистре
print(test.upper())			# преобразование строки к верхнему регистру
print(test.lower())			# преобразование строки к нижнему регистру
print(test.capitalize())	# переводит первый символ строки в верхний регистр, а все остальные в нижний