#	///////////////////////////////////////////////////////////////
#	Копии и представления .........................................

#	При работе с массивами, их данные иногда необходимо копировать 
#	в другой массив, а иногда нет. Это часто является источником 
#	путаницы. Возможно 3 случая:

#	Вообще никаких копий ..........................................

#	Простое присваивание не создает ни копии массива, ни копии его 
#	данных:

	a = np.arange(12)
	b = a  # Нового объекта создано не было
	b is a  # a и b это два имени для одного и того же объекта ndarray
	# True

	b.shape = (3,4)  	# изменит форму a
	a.shape 			# (3, 4)

#	Python передает изменяемые объекты как ссылки, поэтому вызовы 
#	функций также не создают копий.

#	Представление или поверхностная копия .........................

#	Разные объекты массивов могут использовать одни и те же данные. 
#	Метод view() создает новый объект массива, являющийся 
#	представлением тех же данных.

	c = a.view()
	c is a 		# False
	c.base is a  # c это представление данных, принадлежащих a
	# True

	c.flags.owndata 	# False
	c.shape = (2,6)  # форма а не поменяется
	a.shape 			# (3, 4)
	c[0,4] = 1234  # данные а изменятся
	
	a
	# array([[  0, 1, 2, 3],
	#        [1234, 5, 6, 7],
	#        [ 8, 9, 10, 11]])

#	Срез массива это представление:

	s = a[:,1:3]
	s[:] = 10
	
	a
	# array([[  0, 10, 10, 3],
	#        [1234, 10, 10, 7],
	#        [ 8, 10, 10, 11]])

#	Глубокая копия ................................................

#	Метод copy() создаст настоящую копию массива и его данных:

	d = a.copy()  # создается новый объект массива с новыми данными
	d is a 	# False
	d.base is a  # d не имеет ничего общего с а
	# False

	d[0, 0] = 9999
	a
	# array([[  0, 10, 10, 3],
	#        [1234, 10, 10, 7],
	#        [ 8, 10, 10, 11]])