os ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот модуль 

# документация на английском:
# https://docs.python.org/3/library/os.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from os import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

path.exists(path) 
# возвращает значение True, если файл (или папка), на который
# ссылается аргумент, существует, и значение False, если он
# не существует. в качестве параметра можно передать целочисленный 
# дескриптор открытого файла, возвращенный функцией open() из того же 
# модуля os

path.isfile(path)
# возвращает значение True, если заданый аргументом путь существует
# и является файлом, и значение False в противном случае

path.isdir(path)
# возвращает значение True, если заданый аргументом путь существует
# и является папкой, и значение False в противном случае

path.isabs(path)
# возвращает True, если путь является абсолютным, и False - в противном
# случае

path.islink('file.txt') # False
# проверка является ли файл символьной ссылкой

path.abspath('ex.py') # '/home/pythman/Learn/Python/os/ex.py'
# преобразует относительный путь в абсоmотный, учи­тывая местоположение 
# текущего рабочего каталога.

path.realpath('filename.txt')
# получаем символьную сылку на оригинальный файл

path.basename(path)
# возвращает имя файла без пути к нему

path.relpath(path, start)
# возвращает строку относительного пути от start к path. 
# Если путь старт не указан, то в качестве него используется
# текущая дериктория

path.getsize(путь_к_файлу)
# возвращает размер файла в байтах. Если файл не существу­ет, возбуждается 
# исключение OSError

path.getatime(путь_к_файлу)
# служит для определения времени последнего доступа к файлу. В качестве 
# значения функция возврашает количество секунд, прошедших с на­чала эпохи. 
# Если файл не существует, возбуждается исключение OSError.

path.getctime(путь_к_файлу)
# позволяет узнать дату создания файла. В качестве значения функция 
# возвращает количество секунд, прошедших с начала эпохи. Если файл не 
# суще­ствует, возбуждается искточение OSError.

path.getmtime(путь_к_файлу)
# возвращает время последнего изменения файла. В качестве значения функция 
# возвращает количество секунд, прошедших с начала эпохи. Если файл не 
# существует, возбуждается искточение OSError .

path.dirname(path)
# возвращает путь к папке, где хранится файл

path.split(path)
# возвращает кортеж из двух элементов: пути к папке, где хранится файл, и 
# названия файла

path.splitdrive(path)
# разделяет путь на имя диска и остальную часть пути. В качестве значения 
# возвращается кортеж из двух элементов

path.splitext(path)
# возврашает кортеж из двух элементов: пути с названием файла, но без 
# расширения, и расширения файла (фрагмент после последней точки)

path.join(path_1, ...pathN)
# соединяет указанные элементы пути, при необходи­мости вставляя между ними 
# разделители

path.sep
# разделитель дерикторий работающий во всех операционных
# системах. Значение этого атрибута зависит от используемой операционной
# системы.




access(путь, режим)
# предназначена для определения прав доступа к файлу или каталогу. Функция 
# возвращает True, если проверка прошла успешно, или False - в противном 
# слу­чае. В параметре <Режим> могут быть указаны следующие константы, 
# определяющие тип проверки:
	os.F_OK # проверка наличия пути или файла
	os.R_OK # проверка на возможность чтения файла или каталога
	os.W_OK # проверка на возможность записи в файл или каталог
	os.X_OK # определение, является ли файл или каталог выполняемым


rename(old_name, new_name)
# переименовывает файл. Если файл не удалось переименовать, возбуждается 
# исключение OSError или одно из исключений, являющих­ся подклассом этого 
# класса.

link(old, new)
# создание жёсткой ссылки на существующего файла из
# нового

symlink(src, dst)
# создание символьной ссылки 

chmod(путь, права_доступа)
# изменяет права доступа из программы. Права доступа задаются в виде числа, 
# перед которым следует указать комбинацию симво­лов Оо (это соответствует 
# восьмеричной записи числа): 
# os.chmod(r"file.txt", 0o777) # Полный доступ к файлу
# Вместо числа можно указать комбинацию констант из модуля stat.

chown(path, uid, gid)
# изменить владельца и/или группу, указав числовой 
# идентификатор пользователя ID ( uid ) и идентификатор 
# группы ( gid )

remove('filename.txt')
# удаляем файл

unlink('path/file.txt')
# удаляет файл по указанному пути

mkdir('path', mode)
# создаём дерикторию с провами доступа

mkdir('path/path', mode)
# создаём дерикторию в дериктории

makedirs('imgs2', exist_ok=True)
# создаём дерикторию придворительно проверяя её присутствие

rmdir('path')
# удаляем дерикторию, эта дериктория должна быть
# пуста

listdir('path')
# получаем содержимое дериктории

chdir('path')
# перемещение из одной дериктории в другую

getpgid()
# получаем идентификатор процеса

getcwd()
# получаем текущею рабочую дерикторию

getuid()
# получение идентификатора пользователя

getgid()
# получение идентификатора группы

walk('derectory')
# используется для обхода дерева файлов и дериктории

stat(путь_к_файлу)
# позволяет получить размер файла и время создания, изменения и доступа 
# к файлу, а также значения других метаданных. В качестве значения функция
# возвращает объект stat_result, содержащий десять атрибутов: st_mode, 
# st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime и 
# st_ctime.

utime(путь_к_файлу, None)
utime(путь_к_файлу, последний_доступ, изменение_файла)
# позволяет обновить время последнего доступа и время изменения файла
# в качестве первого параметра можно указывать не только строковый путь, 
# но и целочисленный дескриптор открытого файла, возвращенный функцией open() 
# из модуля os. Если в качестве второго параметра указано значение None, то 
# время доступа и изменения файла будет текущим. Во втором варианте формата 
# функции utime() указывает­ся кортеж из новых значений в виде количества 
# секунд, прошедших с начала эпохи. Если файл не существует, возбуждается 
# исключение OSError. 