import os

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

os.path.exists(path) 
# возвращает значение True, если файл (или папка), на который
# ссылается аргумент, существует, и значение False, если он
# не существует 

os.path.isfile(path)
# возвращает значение True, если заданый аргументом путь существует
# и является файлом, и значение False в противном случае

os.path.isdir(path)
# возвращает значение True, если заданый аргументом путь существует
# и является папкой, и значение False в противном случае

os.path.isabs('ex') # False
# проверка является ли аргумент обсолютным путём

os.path.islink('file.txt') # False
# проверка является ли файл символьной ссылкой

os.path.abspath('ex.py') # '/home/pythman/Learn/Python/os/ex.py'
# получение обсолютного пути к файлу

os.path.realpath('filename.txt')
# получаем символьную сылку на оригинальный файл

os.path.basename(path)
# возвращает строку, содержащую всю ту часть пути,
# которая следует за последней косой чертой в аргументе
# path

os.path.relpath(path, start)
# возвращает строку относительного пути от start к path. 
# Если путь старт не указан, то в качестве него используется
# текущая дериктория

os.path.getsize('filename.txt')
# возвращает размера файла выраженный в байтах

os.path.dirname(path)
# возвращает строку содержащую всю часть пути, которая 
# предшествует последней касой черте в аргументе path

os.path.split(abspath)
# возвращает кортеж содержащий как имя папки, так и 
# базовое имя

os.path.splitext(p)
#

os.path.sep
# разделитель дерикторий работающий во всех операционных
# системах 

os.rename(old, new)
# изменение имён файлов

os.link(old, new)
# создание жёсткой ссылки на существующего файла из
# нового

os.symlink(src, dst)
# создание символьной ссылки 

os.chmod('file.py', 0o400)
# доступен для чтения только своему владельцу

os.chown(path, uid, gid)
# изменить владельца и/или группу, указав числовой 
# идентификатор пользователя ID ( uid ) и идентификатор 
# группы ( gid )

os.remove('filename.txt')
# удаляем файл

os.unlink('path/file.txt')
# удаляет файл по указанному пути

os.mkdir('path', mode)
# создаём дерикторию с провами доступа

os.mkdir('path/path', mode)
# создаём дерикторию в дериктории

os.makedirs('imgs2', exist_ok=True)
# создаём дерикторию придворительно проверяя её присутствие

os.rmdir('path')
# удаляем дерикторию, эта дериктория должна быть
# пуста

os.listdir('path')
# получаем содержимое дериктории

os.chdir('path')
# перемещение из одной дериктории в другую

os.getpgid()
# получаем идентификатор процеса

os.getcwd()
# получаем текущею рабочую дерикторию

os.getuid()
# получение идентификатора пользователя

os.getgid()
# получение идентификатора группы

os.walk('derectory')
# используется для обхода дерева файлов и дериктории

