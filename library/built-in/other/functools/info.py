functools ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# сборник функций высокого уровня: взаимодействующих с другими 
# функциями или возвращающие другие функции.

# документация на английском:
# https://docs.python.org/3/library/functools.html

# документация на русском:
# http://pythonz.net/references/named/functools/

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from functools import *

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

cmp_to_key(func)
# Преобразует функцию сравнения старого стиля — cmp, к новому 
# стилю — key. В Python 3 ключ-функции (key) пришли на место функций 
# сравнения (cmp). Результат cmp_to_key может использоваться 
# инструментами, принимающими ключ-функции, например: sorted(), min(), 
# max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby()
# Функция сравнения (cmp) — это любой объект, поддерживающий вызов, 
# принимающий аргументами два стоящих рядом элемента. Вызов такой 
# функции должен вернуть отрицательное число (если первый меньше второго), 
# нуль (если равны) и положительное (если первый больше второго).
# Ключ-функция (key) — это любой объект, поддерживающий вызов, 
# принимающий один аргумент и возвращающий значение, которое должно быть 
# использовано в качестве ключа при сортировке.


lru_cache(maxsize=128, typed=False)
# Декоратор для мемоизации функций.
	maxsize=128
	# Максимальное хранимое количество результатов (размер кеша). 
	# Если установить в None, то размер не будет ограничен (и кеш 
	# перестанет быть LRU). Лучше, если значение будет степенью двойки.
	typed=False
	# Если True, то разные типы будут кешироваться отдельно: например, 
	# результаты f(3) и f(3.0) будут закешированы по отдельности.
# LRU (least recently used) кеш — кеш с конечным размером, где часто 
# используемые записи вытесняют прочие. При помощи данного декоратора 
# можно мемоизировать результат функции (запечатлеть результаты для 
# конкретных наборов аргументов).
# Такое кеширование позволяет экономить время и ресурсы, если тяжёлая 
# функция вызывается периодически с более или менее одинаковым набором 
# аргументов.


total_ordering
# Декоратор для классов, упрощающий реализацию «богатых» сравнений.

partial(func, *args, **keywords)
# Для указанной функции возвращает объект, поддерживающий вызов, 
# частично применяющий к функции указанные аргументы.
	func
	# Объект, поддерживающий вызов (например: функция, метод, 
	# дескриптор), к которому требуется частично применить аргументы.
	*args
	# Позиционные аргументы, которые требуется применить к методу func.
	**kwargs
	# Именованные аргументы, которые требуется применить к методу func.


partialmethod(func, *args, **keywords)
# Возвращает дескриптор, частично применяющий к методу указанные 
# аргументы.


reduce(function, iterable, initializer=None)
# Применяет указанную функцию к элементам последовательности, сводя 
# её к единственному значению.
	function
	# Функция, которую требуется применить к элементам 
	# последовательности. Должна принимать два аргумента, где первый 
	# аргумент — аккумулированное ранее значение, а второй — следующий 
	# элемент последовательности.
	iterable
	# Последовательность, элементы которой требуется свести к 
	# единственному значению. Если последовательность пуста и не задан 
	# initializer, то возбуждается TypeError
	initializer
	# Базовое значение, с которого требуется начать отсчёт. Оно же 
	# будет возвращено, если последовательность пуста.


singledispatch
# Декоратор, превращающий функцию в универсальную функцию одиночной 
# диспетчеризации.


update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, 
	updated=WRAPPER_UPDATES)
# Дополняет функцию-обёртку, данными из некоторых атрибутов 
# оборачиваемой функции.
	wrapper
	# Функция-обёртка.
	wrapped
	# Оборачиваемая функция.
	assigned=WRAPPER_ASSIGNMENTS
	# Кортеж с именами атрибутов оборачиваемой функции, которые 
	# следует перенести в обёртку.
	updated=WRAPPER_UPDATES
	# Кортеж с именами атрибутов оборачиваемой функции, которыми следует 
	# обновить обёртку.


wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, 
	updated=WRAPPER_UPDATES)
# Декоратор, дополняющий функцию-обёртку, данными из некоторых 
# атрибутов оборачиваемой функции.
	wrapped
	# Оборачиваемая функция.
	assigned=WRAPPER_ASSIGNMENTS
	# Кортеж с именами атрибутов оборачиваемой функции, которые 
	# следует перенести в обёртку.
	updated=WRAPPER_UPDATES
	# Кортеж с именами атрибутов оборачиваемой функции, которыми следует 
	# обновить обёртку.
