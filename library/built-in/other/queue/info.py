queue :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот модуль реализует многопроцессорные очереди с несколькими 
# потребителями. Это особенно полезно при многопоточном 
# программировании, когда информация должна быть безопасно заменена 
# между несколькими потоками.

# документация на английском:
# https://docs.python.org/3/library/queue.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from queue import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Queue(maxsize=0)
# Создает очередь с последовательной организацией, имеющую указанный 
# размер maxsize, которая не позволяет вставлять новые блоки после 
# достижения этого размера. Если размер не указан, то длина очереди 
# становится неограниченной

LifoQueue(maxsize=0)
# Создает стек, имеющий указанный размер maxsize, который не 
# позволяет вставлять новые блоки после достижения этого размера. 
# Если размер не указан, то длина стека становится нео­граниченной

PriorityQueue(maxsize=0)
# Создает очередь по приоритету, имеющую указанный размер maxsize, 
# которая не позволяет вставлять новые блоки после достижения этого 
# размера. Если размер не указан, то длина очереди становится 
# неограниченной

Empty
# Активизируется при вызове метода get*() приминительно к пустой 
# очереди

Full
# Активизируется при вызове метода put*() приминительно к 
# заполненной очереди


# методы объекта queue :::::::::::::::::::::::::::::::::::::::::::

qsize()
# Возвращает размер очереди (это - приблизительное значение,
# поскольку при выполнении этого метода может происходить 
# обновление очереди другими потоками)

empty()
# Возвращает True, если очередь пуста; в противном случае 
# воз­вращает False

full()
# Возвращает True, если очередь заполнена; в противном случае
# возвращает False

put(item, block=True, timeout=None)
# Помещает элемент item в очередь; если значение blосk равно
# True (по умолчанию) и значение timeout равно None, устанавливает 
# блокировку до тех пор, пока в очереди не появится свободное 
# место. Если значение timeout является положи­тельным, блокирует 
# очередь самое больше на timeout секунд, а если значение block 
# равно False, активизирует исключение Empty

put_nowait(item)
# To жe, чтo и put(item, False)

get(block=True, timeout=None)
# Получает элемент из очереди, если задано значение blосk 
# (от­личное от О); устанавливает блокировку до того времени, 
# пока элемент не станет доступным

get_nowait()
# То же, что и get(False)

task_done()
# Используется для указания на то, что работа по постановке 
# элемента в очередь завершена, в сочетании с описанным ниже 
# методом join()

join()
# Устанавливает блокировку до того времени, пока не будут обра­ботаны 
# все элементы в очереди; сигнал об этом вырабатывается путем вызова 
# описанного выше метода task_done()
