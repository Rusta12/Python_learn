zipfile ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Формат ZIP-файла является общим стандартом архива и сжатия. Этот модуль 
# предоставляет инструменты для создания, чтения, записи, добавления и 
# отображения ZIP-файла.

# документация на английском:
# https://docs.python.org/3/library/zipfile.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from zipfile import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

ZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True)
# получения объкта орхива
# Первый параметр задает путь к архивному файлу. Вместо него можно задать 
# файловый объект.
# Параметр mode определяет режим открытия файла. Мы можем указать строковые 
# значения:
	'r'
	# открыть существующий файл для чтения. Если файл не существует, будет 
	# возбуж­дено исключение;
	'w' 
	# открыть существующий файл для записи. Если файл не существует, будет 
	# возбуж­дено исключение. Если файл существует, он будет перезаписан;
	'а'
	# открыть существующий файл для записи. Если файл не существует, он 
	# будет соз­дан. Если файл существует, новое содержимое будет добавлено 
	# в его. конец, а старое содержимое сохранится.
# Параметр compression указывает алгоритм сжатия, который будет применен
# для архивирования содержимого файла. Доступны значения:
	zipfile.ZIP_STORED
	# сжатие как таковое отсутствует. Значение по умолчанию;
	zipfile.ZIP_DEFIATED
	# алгоритм сжатия Deflate, стандартно применяемый в архивах ZIP
	zipfile.ZIP_BZIP2
	# алгоритм, применяемый в архивах BZIP2;
	zipfile.ZIP_LZМA
	# aлropитм, применяемый в архивах LZMA.
# Если присвоить параметру allowZip64 значение - False, будет невозможно 
# создать архив размером более 2 Гбайт. Этот параметр предусмотрен для 
# совместимости со старыми вер­сиями архиваторов ZIP.
	
# объекты созданные данным классом имеют следующие методы

	namelist()
	# возвращает список с именами хранящихся в архиве файлов

	getinfo(name)
	# возвращает сведения о хранящемся в архиве файле с указан­ным именем. 
	# Эти сведения представляются в виде объекта класса Zipinfo, 
	# объявленного в модуле zipfile

	infolist()
	# возвращает сведения обо всех содержащихся в архиве файлах в виде 
	# спи­ска объектов класса Zipinfo

	open(name, mode='r', pwd=None, *, force_zip64=False)
	# открывает хранящийся в архиве файл для чтения. Файл может быть задан 
	# либо в виде имени, либо как объект класса Zipinfo. Результатом, 
	# воз­вращенным методом, станет объект класса ZipExtFile, поддерживающий 
	# методы read(), readline(), readlines(), а также итерационный протокол.

	printdir()
	#

	setpassword(pwd)
	# задает пароль по умолчанию для распаковки файлов

	read(name, pwd=None)
	# возвращает содержимое хранящегося в архиве файла с указанным именем.

	testzip()
	# выполняет проверку целостности архива. Возвращает None, если архив 
	# не поврежден, или имя первого встретившегося ему сбойного файла

	write(filename, arcname=None, compress_type=None)
	# добавляет в архив файл с указанным именем. Параметр arcname
	# задает имя, которое файл примет, будучи помещенным в архив, 
	# - если он не указан, файл сохранит свое оригинальное имя. 
	# Параметр compress_type задает алгоритм сжа­тия - если он не 
	# указан, будет использован алгоритм, заданный при открытии 
	# самого архива.

	writestr(zinfo_or_arcname, data[, compress_type])
	# добавляет в архив произвольные данные в виде файла с указанным 
	# именем

	filename
	#

	debug
	#

	comment
	# позволяет получить или задать комментарий к архиву. В качестве 
	# коммента­рия может выступать строка длиной не более 65535 байтов. Более 
	# длинные строки авто­матически сокращаются при закрытии архива.

	extractall(path=None, members=None, pwd=None)
	# распаковывает сразу не­сколько или даже все файлы из архива. 
	# Параметр memЬers задает список имен файлов, которые должны быть 
	# распакованы, - если он не указан, будут распакованы все файлы.

	extract(member, path=None, pwd=None)
	# распаковывает из архива указанный файл, который может быть задан в 
	# виде имени или объекта класса Zipinfo. Параметр path сообщает 
	# архиватору путь, по которому должен быть распакован файл, - если он
	# не указан, файл будет сохранен там же, где находится сам архив. 
	# Параметр pwd задает пароль для распаковки файла, если таковой 
	# требуется. В качестве результата возвраща­ется полный путь к 
	# распакованному файлу.

	close()
	# закрывает архивный файл



PyZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True, 
	optimize=-1)
# 
	writepy(pathname, basename='', filterfunc=None)
	#




ZipInfo(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))
# Конструктор объектов. Объекты созданные данным конструктором получают
# следующие атрибуты:
	
	from_file(filename, arcname=None)
	#
	
	is_dir()
	#

	filename
	# имя файла

	date_time
	# дата и время последнего изменения файла. Представляется в виде 
	# кор­тежа из шести элементов: года, номера месяца (от 1 до 12), числа 
	# (от 1 до 31 ), часов (от О до 23), минут (от О до 59) и секунд 
	# (от О до 59)

	compress_type
	# алгоритм сжатия

	comment
	# комментарий к файлу

	extra
	#

	create_system
	# операционная система, в которой был создан архив

	create_version
	# версия архиватора, в которой бьш создан архив

	extract_version
	# версия архиватора, необходимая для распаковки архива

	reserved
	#

	flag_bits
	#

	volume
	#

	internal_attr
	#

	external_attr
	#

	header_offset
	#

	CRC
	# 32-разрядная контрольная сумма

	compress_size
	# размер файла в сжатом виде

	file_size
	# размер изначального (несжатого) файла




is_zipfile(filename)
# возвращает True, если файл с переданным ей именем является архивом ZIP, 
# и False - в противном случае.

ZIP_STORED
#

ZIP_DEFLATED
#

ZIP_BZIP2
#

ZIP_LZMA
#








# exceptions ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

BadZipFile
# либо архив поврежден, либо это вообще не ZIР-архив

BadZipfile
#

LargeZipFile
# слишком большой архив ZIP. Обычно возникает, когда архив создается 
# вызовом конструктора класса ZipFile с параметром allowZip64, имеющим 
# значение False, и размер получившегося архива в процессе работы становится 
# больше 2 Гбайт.
