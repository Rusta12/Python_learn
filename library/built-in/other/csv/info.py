CSV :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Каждая строка csv-файла представляет одну строку электроной
# таблицы, значение лтдельных столбцов которой разделены запятыми.

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 

# документация на английском:
# https://docs.python.org/3/library/csv.html

# документация на руском:
# https://python-scripts.com/import-csv-python

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from csv import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

DictReader(f, fieldnames=None, restkey=None, restval=None, 
	dialect='excel', *args, **kwds)
reader(csvfile, dialect='excel', **fmtparams)
# читает, и предоставляет возможность итерирования по строкам 
# csv-файла
	__next__()
	# вызывается методом next()
	dialect
	# 
	line_num
	# получение номера текущей строки
	fieldnames
	#



DictWriter(f, fieldnames, restval='', extrasaction='raise', 
	dialect='excel', *args, **kwds)
writer(csvfile, dialect='excel', **fmtparams)
# позволяет записывать данные в csv-файл
	writerow(row)
	# принимает список, каждое значение этого списка помещается
	# в отдельную ячейку выходного csv-файла. Возвращаемым значением
	# метода является число символов, записаных в файл для данной 
	# строки таблицы (включая символы новой строки)
	writerows(rows)
	# принимает коллекцию итерируемых объектов
	dialect
	#
	writeheader()
	# 



register_dialect(name[, dialect[, **fmtparams]])
# установка ассоциированного диалекта с именем. имя должно быть 
# строкой. Диалект может быть указан либо путем передачи подкласса 
# Dialect, либо с помощью аргументов ключевого слова fmtparams, 
# либо обоих, с аргументами ключевого слова, переопределяющими 
# параметры диалекта.

unregister_dialect(name)
# удаляет диалект, связанный с именем, из реестра диалектов.

get_dialect(name)
# получение деалекта по имени

list_dialects()
# получение списка диалектов

field_size_limit([new_limit])
# возвращает текущий максимальный размер поля, разрешенный парсером. 
# Если задан параметр new_limit, это станет новым пределом


Dialect
#
	delimiter
	# устанавливает разделитель между ячейками
	doublequote
	# Контролирует, как кавычки, появляющиеся внутри поля, должны быть 
	# указаны. Когда True, символ удваивается. Когда False, escapechar 
	# используется как префикс к катчару. По умолчанию используется 
	# значение True.
	escapechar
	# Односимвольная строка, используемая автором для выхода из 
	# разделителя, если для кавычки установлено значение QUOTE_NONE и 
	# катчар, если doublequote равен False. При чтении escapechar 
	# удаляет любое специальное значение из следующего символа. По 
	# умолчанию используется значение None, что отключает экранирование.
	lineterminator
	# устанавливает межстрочный интервал
	quotechar
	# Односимвольная строка, используемая для указания полей, содержащих 
	# специальные символы, такие как разделитель или катчар, или которые 
	# содержат символы новой строки. По умолчанию используется значение «».
	quoting
	# Контролирует, когда кавычки должны генерироваться автором и 
	# распознаваться читателем. Он может принимать любую константу QUOTE_ * 
	# и по умолчанию имеет значение QUOTE_MINIMAL.
	skipinitialspace
	# Когда True, пробел сразу после разделителя игнорируется. По 
	# умолчанию используется значение False.
	strict
	# Когда «Истина», выведит exception Error при неправильном вводе 
	# CSV. По умолчанию используется значение False.


unix_dialect
#

Sniffer
# Класс Sniffer используется для форматирования вывода 
# CSV-файла.
	sniff(sample, delimiters=None)
	# Проанализирует данный образец и вернёт подкласс 
	# Dialect, отражающий найденные параметры. Если 
	# задан необязательный параметр разделителей, он 
	# интерпретируется как строка, содержащая возможные 
	# допустимые символы разделителя.
	has_header(sample)
	# Проанализирует образец текста (предположительно в 
	# формате CSV) и вернёт True, если первая строка 
	# представляет собой серию заголовков столбцов

QUOTE_ALL
# инструкция объетам writer цитировать все поля

QUOTE_MINIMAL
# Поручает объектам writer указывать только те поля, которые 
# содержат специальные символы, такие как разделитель, катчар 
# или любой из символов в определителе.

QUOTE_NONNUMERIC
# Поручает объектам writer процитировать все нечисловые поля.

QUOTE_NONE
# Поручает reader не выполнять специальную обработку символов 
# кавычек.

