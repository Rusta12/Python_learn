thread :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Низкоуровневый модуль thread для работы с потоками который может
# не только порождать потоки, но и обеспечивать работу с основ­ной 
# структурой синхронизации данных, называемой объектом блокировки 
# (таковыми являются примитивная блокировка, простая блокировка, 
# блокировка со взаимным исключением, мьютекс и двоичный семафор) 

# документация на английском:
# https://docs.python.org/3/library/_thread.html

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from _thread import *

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

LookType
# тип объекта блокировки

start_new_thread(function, args, kwargs)
# Порождает новый поток и вызывает на выполнение функцию function 
# с заданными параметрами args и необязательными параметрами kwargs

interrupt_main()
# Поднимает исключение KeyboardInterrupt в основном потоке. 
# Дочерние потоки (subthread) могут использовать эту функцию для 
# прерывания основного потока.

exit()
# Дает указание о выходе из потока

allocate_lock()
# Создаёт объект блокировки в разблокированном состоянии

get_ident()
# Вернёт id текущего потока. Это целое число больше нуля

stack_size([size])
# Вернёт размер стека потоков, используемый при создании новых 
# потоков. Необязательный аргумент size определяет размер стека, 
# который будет использоваться для созданных впоследствии потоков, 
# и должен быть 0 (будет использовать платформу или настройки по 
# умолчанию) или положительное целое значение не менее 
# 32 768 (32 KiB). Если размер не указан, используется 0. Если 
# изменение размера стека потоков не поддерживается, возникает 
# RuntimeError. Если указанный размер стека недействителен, 
# создается ValueError, и размер стека не изменяется.

TIMEOUT_MAX
# Устанавливает максимальное значение, разрешенное для параметра 
# таймаута Lock.acquire(). Если в acquire указать timeout, больше, 
# чем это значение, вызовет OverflowError.

acquire(waitflag=1, timeout=-1)
# Блокирует объект блокировки.
# waitflag - целочисленный аргумент, если оно равно нулю, 
# блокировка будет получена только в том случае, если ее можно 
# будет получить немедленно, не ожидая, а если она отлична от 
# нуля, блокировка будет получена безоговорочно, как указано выше.
# Если аргумент timeout с плавающей запятой присутствует и 
# положителен, он указывает максимальное время ожидания в секундах 
# перед возвратом. Параметр отрицательного таймаута указывает 
# неограниченное ожидание. Вы не можете указать тайм-аут, если
# waitflag равен нулю.
# Если вернёт True, блокировка получена успешно, False, если нет.

release()
# Отключает блокировку.

locked()
# Возвращает True, если включена блокировка, в противном слу­чае 
# возвращает False


# exception ::::::::::::::::::::::::::::::::::::::::::::::::::::::

error
# ошибка связанная с потоком