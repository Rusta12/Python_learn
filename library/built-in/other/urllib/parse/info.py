urllib.parse ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот модуль определяет стандартный интерфейс для разбивки строк 
# Uniform Resource Locator (URL) в компонентах (схема адресации, 
# местоположение сети, путь и т. Д.), Чтобы объединить компоненты обратно 
# в строку URL и преобразовать «относительный URL» в абсолютный URL, 
# заданный «базовым URL». Модуль разработан таким образом, чтобы он 
# соответствовал интернет-RFC на Relative Uniform Resource Locators. Он 
# поддерживает следующие схемы URL: файл, ftp, gopher, hdl, http, https, 
# imap, mailto, mms, news, nntp, prospero, rsync, rtsp, rtspu, sftp, 
# shttp, sip, sips, snews, svn, svn + ssh, telnet, wais, ws, wss.

# документация на английском:
# https://docs.python.org/3/library/urllib.parse.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from urllib.parse import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

urlparse(urlstring, scheme='', allow_fragments=True)
# Функция возвращает объект ParseResult с результатами разбора URL-aдpeca. 
# Получить значения можно с помощью атрибутов или индексов. Объект можно 
# преобразовать в кор­теж из следующих элементов: (scheme, netloc, path, 
# params, query, fragment). Элемен­ты соответствуют схеме URL-aдpeca:
# scheme://netloc/path;parameters?query#fragment.
# Обратите внимание на то, что название домена, хранящееся в атрибуте 
# netloc, будет со­держать номер порта.
# Объект ParseResult, возвращаемый функцией urlparse(), содержит следующие 
# атрибуты:
	sheme
	# название протокола. Значение доступно также по индексу О. По 
	# умолчанию - пустая строка.
	netloc
	# название домена вместе с номером порта. Значение доступно также по 
	# индек­су 1. По умолчанию - пустая строка.
	path
	# путь. Значение доступно также по индексу 2. По умолчанию - пустая 
	# строка.
	params
	# параметры. Значение доступно также по индексу 3. По умолчанию - 
	# пустая строка.
	query
	# строка запроса. Значение доступно также по индексу 4. По умолчанию - 
	# пус­тая строка.
	fragment
	# якорь. Значение доступно таюке по индексу 5. По умолчанmо - пустая
	# строка.
	username
	# имя пользователя. Значение по умолчанию - None.
	password
	# пароль. Значение по умолчанmо - None.
	hostname
	# название домена в нижнем регистре. Значение по умолчанию - None;
	port
	# номер порта. Значение по умолчанию - None


parse_qs(qs, keep_blank_values=False, strict_parsing=False, 
	encoding='utf-8', errors='replace')
# разбирает строку запроса и возвращает словарь с кmочами, представляю­щими 
# собой названия параметроа, и значениями, которыми станут значения этих 
# пара­метров.
# Если в параметре keep_blank_values указано значение True, то параметры, 
# не имеющие значений внутри строки запроса, также будут добавлены в 
# результат. По умолчанию пустые параметры игнорируются. Если в параметре 
# strict_parsing указано значение True, то при наличии ошибки возбуждается 
# исключение ValueError. По умолчанию ошибки игнорируются. Параметр encoding 
# позволяет указать кодировку данных, а пара­метр errors - уровень обработки 
# ошибок.

parse_qsl(qs, keep_blank_values=False, strict_parsing=False, 
	encoding='utf-8', errors='replace')
# функция аналогична parse_qs(), только возвращает не словарь, а список
# кортежей из двух элементов: первый элемент «внутреннего» кортежа содержит 
# название параметра, а второй элемент - его значение. Если строка запроса 
# содержит несколько параметров с одинаковыми значениями, то они будут 
# расположены в разных кортежах.

urlunparse(parts)
# Выполнить обратную операцшо ( собрать URL-aдpec из отдельных значений)

urlsplit(urlstring, scheme='', allow_fragments=True)
# Ее отличие от ur lp arse () проявляется в том, что она не вы­деляет из 
# интернет-адреса параметры. Функция возвращает объект SplitResult с 
# результа­тами разбора URL-aдpeca. Объект можно преобразовать в кортеж из 
# следующих элементов:
# (scheme, netloc, path, query, fragrnent). Обратиться к значениям можно 
# как по индексу, так и по названию атрибутов.

urlunsplit(parts)
# Выполнить обратную операцmо (собрать URL-aдpec из отдельных значений)

urljoin(base, url, allow_fragments=True)
# Преобразовать относительную ссылку в абсолютный URL-aдpec

urldefrag(url)
#




# Structured Parse Results ::::::::::::::::::::::::::::::::::::::::::::::::

# Объекты результата из функций urlparse(), urlsplit() и urldefrag() 
# являются подклассами типа кортежа. Эти подклассы добавляют атрибуты, 
# перечисленные в документации для этих функций, поддержку кодирования и 
# декодирования, описанную в предыдущем разделе, а также дополнительный 
# метод:

SplitResult.geturl()
# 

DefragResult(url, fragment)
#

ParseResult(scheme, netloc, path, params, query, fragment)
#

SplitResult(scheme, netloc, path, query, fragment)
#

DefragResultBytes(url, fragment)
#

ParseResultBytes(scheme, netloc, path, params, query, fragment)
#

SplitResultBytes(scheme, netloc, path, query, fragment)
#




# URL Quoting :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
quote(string, safe='/', encoding=None, errors=None)
# заменяет все специальные символы последовательностями %nn. Цифры, 
# анг­лийские буквы и символы подчеркивания (_), точки (.) и дефиса (-) не 
# кодируются. Пробелы преобразуются в последовательность %20.
	safe
	# В параметре safe можно указать символы, которые преобразовывать нельзя, 
	# - по умол­чанюо параметр имеет значение /.
	encoding
	# Параметр encoding позволяет указать кодировку дан­ных
	errors
	# уровень обработки ошибок


quote_plus(string, safe='', encoding=None, errors=None)
# функция аналогична quote(), но пробелы заменяются символом (+), а не 
# преобразуются в последовательность %20. Кроме того, по умолчанию символ (/) 
# преобра­зуется в последовательность %2F.

quote_from_bytes(bytes, safe='/')
# функция аналогична quote (), но в качестве первого параметра принимает 
# последовательность байтов, а не строку.

unquote(string, encoding='utf-8', errors='replace')
# заменяет последовательности %nn соответствующими символами. Символ +
# пробелом не заменяется.

unquote_plus(string, encoding='utf-8', errors='replace')
# функция - аналогична unquote() , но дополнительно заменяет символ + пробелом.

unquote_to_bytes(string)
# функция - аналогична unquote(), но в качестве первого параметра принимает 
# строку или последовательность байтов и возвращает последовательность
# байтов.

urlencode(query, doseq=False, safe='', encoding=None, errors=None, 
	quote_via=quote_plus)
# преобразовать отдельные составшпощие в строку запро­са. В качестве первого 
# параметра можно указать словарь с данными или последовательность, каждый 
# элемент которой содержит кортеж из двух элементов: первый элемент такого 
# кор­тежа станет параметром, а второй элемент - его значением.
	doseq 
	# если имеет значение True, то вовтором параметре кортежа можно указать 
	# последовательность из нескольких значений. В этом случае в строку 
	# запроса добавляются несколько параметров со значениями из этой 
	# последовательности. Значение параметра по умолчанmо - False.

