io ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот модуль предоставляет основные возможности Python для работы с 
# различными типами ввода-вывода. Существует три основных типа 
# ввода-вывода: текстовый ввод-вывод, двоичный ввод-вывод и необработанные 
# ввод-вывод.

# документация на английском:
# https://docs.python.org/3/library/io.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from io import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

StringIO(initial_value='', newline='\n')
# Класс Stringro работает только со строками.
# позволяет работать со строкой как с файловым объектом. Все операции с 
# этим файловым объектом (будем называть его далее «файл») производятся
# в оперативной памяти.
# Если первый параметр не указан, то начальным значением будет пустая 
# строка. После соз­дания объекта указатель текущей позиции устанавливается 
# на начало «файла». Объект, воз­вращаемый конструктором класса, имеет 
# следующие методы:
	
	close()
	# закрывает «файл». Проверить, открыт «файл» или закрыт, позволяет 
	# атрибут closed. Атрибут возвращает True, если «файл» был закрыт, и 
	# False - в противном случае

	getvalue()
	# возвращает содержимое «файла» в виде строки

	tell()
	# возвращает текущую позицию указателя относительно начала «файла»

	seek(смещение, позиция)
	# устанавливает указатель в позицию, имеющую сме­щение 'cмещение' 
	# относительно позиции 'позиция'. В параметре 'позиция' могут быть
	# указаны следующие значения:
		0 # начало «файла» (значение по умолчанюо)
		1 # текущая позиция указателя
		2 # конец «файла»

	write(string)
	# записывает строку в «файл»

	writelines(последовательность)
	# записывает последовательность в «файл»

	read(count)
	# считывает данные из «файла». Если параметр не ука­зан, то возврашается 
	# содержимое «файла» от текущей позиции указателя до конца «фай­ла». 
	# Если в качестве параметра указать число, то за каждый вызов будет 
	# возвращаться указанное количество символов. Когда достигается конец 
	# «файла», метод возвращает пустую строку.

	readline(count)
	# считывает из «файла» одну строку при каждом вызове. Возвращаемая строка 
	# включает символ перевода строки. Исключением является последняя строка 
	# - если она не завершается символом перевода строки, то символ пе­ревода 
	# строки добавлен не будет. При достижении конца «файла» возвращается 
	# пустая строка. Если в необязательном параметре указано число, то 
	# считывание будет выполняться до тех пор, пока не встретится символ новой 
	# строки (\n), символ конца «файла» или из «файла» не будет прочитано 
	# указанное количество символов. Иными словами, если ко­личество символов в 
	# строке меньше значения параметра, то будет считана одна строка, а не 
	# указанное количество символов. Если количество символов в строке больше, 
	# то воз­вращается указанное количество символов.

	readlines(count)
	# считывает все содержимое «файла» в список. Каждый элемент списка будет 
	# содержать одну строку, включая символ пере­вода строки. Искточением 
	# является последняя строка - если она не завершается сим­волом перевода 
	# строки, то таковой добавлен не будет. Если в необязательном параметре 
	# указано число, то считывается указанное количество символов плюc фрагмент 
	# до символа конца строки \n. Затем эта строка разбивается и добавляется 
	# построчно в список.

	flush()
	# сбрасывает данные из буфера в «файл»

	truncate(count)
	# обрезает «файл» до указанного количества сим­волов. Если параметр не 
	# указан, то «файл» обрезается до текущей позиции указателя



BytesIO([initial_bytes])
# Класс BytesIO поддерживает такие же методы, что и класс StringIO, но в 
# качестве значений методы принимают и возвращают последовательности байтов, 
# а не строки.
	
	getbuffer()
	# возвращает ссылку на объ­ект memoryview. С помощью этого объекта можно 
	# получать и изменять данные по индексу или срезу, преобразовывать данные 
	# в список целых чисел (с помощью метода tolist()) или в последовательность 
	# байтов (с помощью метода tobytes()).