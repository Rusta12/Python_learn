ftplib ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот протокол в основном используется для загрузки общедоступных 
# файлов от имени анонимного пользователя. Кроме того, протокол FTP 
# может использоваться для передачи файлов между двумя компьютерами, 
# особенно если для хранения или архивирования файлов применяется 
# система на основе Unix, а для работы - настоль­ный компьютер или 
# ноутбук. До того как веб-доступ получил широкое распростра­нение, 
# протокол FTP служил в качестве одного из основных методов передачи 
# файлов по Интернету, а также был практически единственным способом 
# загрузки программ­ного обеспечения и (или) исходного кода.
# Как правило, необходимо иметь имя входа/пароль для получения 
# доступа к удаленному хосту, на котором работает FТР-сервер. 
# Исклю­чением являются анонимные учетные записи, которые 
# предназначены для загрузок, осуществляемых пользователями с 
# правами гостя. Это позволяет загружать файлы клиентам, не имеющим 
# учетных записей.

# документация на английском:
# https://docs.python.org/3/library/ftplib.html

# статья на русском:
# https://python-scripts.com/ftplib

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from ftplib import *

# FTP :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
class ftplib.FTP(host='', user='', passwd='', acct='', 
	timeout=None, source_address=None)
# Вернёт новый экземпляр класса FTP. Когда задан host, выполняется 
# вызов метода connect(host). Когда пользователь задан, дополнительно 
# вводится метод login(user, passwd, acct) (где passwd и acct по 
# умолчанию пустая строка, если не заданы). Дополнительный параметр 
# timeout определяет тайм-аут в секундах для блокировки операций, 
# таких как попытка подключения (если не указано, будет использоваться 
# глобальная настройка таймаута по умолчанию). source_address - это 
# кортеж (host, port) для сокета, который должен связываться как его 
# исходный адрес перед подключением.

# objects ::::::::::::::::::

set_debuglevel(level)
# Установливает уровень отладки экземпляра. Контролирует объем 
# отладочного вывода. Значение по умолчанию 0 не выводит вывод 
# отладки. Значение 1 дает умеренный объем отладочного вывода, 
# как правило, одну строку для каждого запроса. Значение 2 или выше 
# дает максимальный объем отладочного вывода, регистрируя каждую 
# отправленную и полученную линию в управляющем соединении.

connect(host='', port=0, timeout=None, source_address=None)
# Открывает новое FTP соединение для указанного хоста, подключаясь 
# к указанному порту (обычно это порт 21 или в случае SFTP 22). 
# Если данные подключения уже ранее передавались конструктору FTP, 
# нет необходимости вызывать метод con.connect()

getwelcome()
# Вернёт приветственное сообщение, отправленное сервером в ответ на 
# начальное соединение. (Это сообщение иногда содержит отказ от 
# ответственности или справочную информацию, которая может иметь 
# отношение к пользователю.)

login(user='anonymous', passwd='', acct='')
# Выполняет аутентификацию на сервере используя указанные в аргументах 
# данные. Первый аргумент с именем пользователя имеет по умолчанию 
# значение "anonymous". Пароль не является обязательным аргументом, 
# по умолчанию является пустой строкой. Данный метод вызывать нет 
# необходимости, если данные аутентификации были переданы в 
# конструктор FTP


abort()
# Отправляет запрос для прерывания попытки продолжающуюся передачу 
# файлов. В зависимости от настроек и особенностей удаленного 
# сервера, результат данного метода может не дать нужного результата

sendcmd(cmd)
# Отправляет серверу команду и ожидает ответа. Данный метод 
# используется для выполнения команд которые не имеют ничего общего 
# с передачей данных.

voidcmd(cmd)
# Отправляет простую командную строку на сервер и обработывает ответ. 
# Не возвращает ничего, если получен ответный код, соответствующий 
# успеху (коды в диапазоне 200-299). В противном случае raise error_reply 

retrbinary(cmd, callback, blocksize=8192, rest=None)
# Аналогичен retrlines() , за исключением того, что применяется к 
# двоичным файлам. Может быть передан необязательный обрат­ный вызов 
# сallback для обработки каждого необходимого загруженного блока 
# (размер blocksize по умолчанию принят равным 8 Кбайт)

retrlines(cmd, callback=None)
# Получить список файлов или каталогов в режиме передачи ASCII. cmd 
# должна быть соответствующей командой RETR (retrbinary()) или 
# командой, такой как LIST или NLST (обычно это просто строка «LIST»). 
# LIST извлекает список файлов и информацию об этих файлах. NLST 
# извлекает список имен файлов. Функция обратного вызова вызывается 
# для каждой строки со строковым аргументом, содержащим строку с 
# завершающим списком CRLF. Обратный вызов по умолчанию выводит строку 
# на sys.stdout.

set_pasv(val)
# Установка пассивного режима. Значение True для аргумента pasv 
# включает пассивный режим. По умолчанию пассивный режим выключен.

storbinary(cmd, fp, blocksize=8192, callback=None, rest=None)
# Выполняет указанную команду на сервер и возвращает результат работы, 
# используя двоичный режим передачи. В аргументе cmd, передается 
# строка с низкоуровневой командой которая имеет вид "STOR filename". 
# В аргументе "fp" отправляется открытый объект файла, откуда вызовом 
# метода file.read(blocksize) будут читаться данные и отправляться на 
# сервер. Аргумент blocksize определяет размер блока передачи на сервер.

storlines(cmd, fp, callback=None)
# Сохраняет файл в режиме передачи ASCII. cmd должна быть соответствующей 
# командой STOR (storbinary()). Строки считываются до EOF из файлового 
# объекта fp(открывается в двоичном режиме) с использованием метода 
# readline() для предоставления данных, которые необходимо сохранить. 
# callback - это необязательный вызываемый параметр, который вызывается 
# в каждой строке после его отправки.

transfercmd(cmd, rest=None)
# Инициирует передачу через FTP-соединение обмена данными. Как только 
# соединение будет установлено, выполняется FTP-команда command. Метод 
# возвращает объект сокета, соответствующему открытому соединению, 
# предназначенный для передачи данных. Аргумент rest отправляет 
# смещение в байтах, но не все сервера поддерживают такой запрос 
# использование данного аргумента вызывает ошибку.

ntransfercmd(cmd, rest=None)
# Как transfercmd(), но возвращает кортеж соединения данных и ожидаемый 
# размер данных. Если ожидаемый размер не может быть вычислен, будет 
# возвращен None как ожидаемый размер. cmd и rest означает то же самое, 
# что и в transfercmd().

mlsd(path="", facts=[])
# Перечисляет каталог в стандартном формате с помощью команды 
# MLSD (RFC 3659). Если путь опущен, предполагается текущий каталог. 
# фактами является список строк, представляющих желаемый тип информации 
# (например, ["type", "size", "perm"]). Вернёт объект-генератор, получая 
# кортеж из двух элементов для каждого файла, найденного в пути. Первый 
# элемент - это имя файла, второй - словарь, содержащий факты о имени 
# файла. Содержание этого словаря может быть ограничено аргументом 
# фактов, но сервер не гарантирует возврата всех запрошенных фактов.

nlst(argument[, ...])
# Аналогичен dir(), но возвращает, а не выводит список имен файлов

dir(argument[, ...])
# Создает список с содержимым каталога, который создается командой 
# LIST. В аргументе dirname указывается имя каталога, для которого 
# будет составлен список содержимого.

rename(old_name, new_name)
# Переименование файлов на сервере

delete(filename)
# Удаляет файл с именем filename с сервера. В случае успеха возвращает 
# текст ответа, в противном случае возникает ошибка error_perm на 
# ошибках разрешений или error_reply при других ошибках.

cwd(pathname)
# Позволяет перейти из текущего рабочего каталога в каталог раthname

mkd(pathname)
# Создает новый каталог на сервере.

pwd()
# Строка с текущим рабочим каталогам на сервере

rmd(dirname)
# Удаляет каталог dirname на удаленном хосте

size(filename)
# После выполнения возвращает размер указанного файла в байтах. 
# Если не удается определить размер файла, возвращается значение None.

quit()
# Отправляя серверу команду 'QUIT', закрывает FTP-соединение.

close()
# Закрывает FTP-соединение. После выполнения данного метода, никакие 
# операции больше не могут выполнятся в сторону объекта.







# FTP_TLS :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
class ftplib.FTP_TLS(host='', user='', passwd='', acct='', 
	keyfile=None, certfile=None, context=None, timeout=None, 
	source_address=None)
# Подкласс FTP, который добавляет поддержку TLS для FTP, как описано 
# в RFC 4217. Подключается, как обычно, к порту 21, неявно обеспечив 
# соединение с FTP-контроллером до аутентификации. Для обеспечения 
# безопасности передачи данных пользователю требуется явно запросить 
# его, вызвав метод prot_p(). context - это объект ssl.SSLContext, 
# который позволяет связывать параметры конфигурации SSL, сертификаты 
# и закрытые ключи в единую (потенциально долговечную) структуру.

# objects ::::::::::::::::::::::::

ssl_version
# Используемая версия SSL (по умолчанию используется 
# ssl.PROTOCOL_SSLv23).

auth()
# Настраивает безопасное управляющее соединение с помощью TLS или SSL, 
# в зависимости от того, что указано в атрибуте ssl_version.
# поддерживает проверку имени хоста с помощью 
# ssl.SSLContext.check_hostname и Server Name Indicication (ssl.HAS_SNI).

ccc()
# Вернёт канал управления обратно в открытый текст. Это может быть 
# полезно использовать брандмауэры, которые знают, как обращаться с
# NAT с незащищенным FTP, не открывая фиксированные порты.

prot_p()
# Настраивает безопасное соединение с данными.

prot_c()
# Настраивает чисто текстовое соединение.





# exception :::::::::::::::::::::::::::::::::::::::::::::::::::::::

error_reply
# возникает при получении от сервера неожиданного ответа

error_temp
# возникает при получении кода ошибки, означающего временную ошибку 
# (коды ответов в диапазоне 400-499)

error_perm
# при получении кода ошибки, означающего постоянную ошибку (коды 
# ответов в диапазоне 500-599)

error_proto
# при получении ответа от сервера, который не соответствует 
# характеристикам ответа протокола передачи файлов, то есть 
# начинается с цифры в диапазоне 1-5.

all_errors
# Набор всех исключений (в качестве кортежа), эти методы экземпляров 
# FTP могут возникать в результате проблем с FTP-соединением (в 
# отличие от ошибок программирования, сделанных вызывающим). Этот 
# набор включает в себя четыре исключения, перечисленные выше, а 
# также OSError.
