shelve ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Этот модуль позволяет сохранять переменные в двоичных файлах-хранилищах. 
# Благодаря этому впоследствии программа может востановить значение 
# переменных, читая данные с жёсткого диска. С помощью модуля shelve можно
# добавить в программу возможности Save (сохранить) и Open (открыть) 

# документация на английском:
# https://docs.python.org/3/library/shelve.html 

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from shelve import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

open(<Путь к файлу>[, flag="c"[, protocol=None[, writeback=False]]])
# В необязательном параметре flag можно указать один из режимов открытия 
# файла:

	r # Только для чтения
	w # чтение и запись
	c # чтение и запись (значение по умолчанию). Если файл не существует, 
	  # он будет создан.
	n # чтение и запись. Если файл не существует, он будет создан. Если 
	  # файл существует, он будет перезаписан.

# Функция open() возвращает объект, с помощью которого производится 
# дальнейшая работа с базой данных. Этот объект имеет следующие методы:

	close()
	# закрывает файл с базой данных.

	keys()
	# возвращает объект с ключами

	values()
	# возвращает объект со значениями

	items()
	# возвращает объект-итератор, который на каждой итерации генерирует 
	# кор­теж, содержащий ключ и значение.

	get(key, значение_поумалчанию)
	# если ключ присутствует, то метод возвра­щает значение, 
	# соответствующее этому ключу. Если ключ отсутствует, то возвращается
	# значение None или значение, указанное во втором параметре

	setdefault(key, значение_поумалчанию)
	# если ключ присутствует, то метод возвращает значение, соответствующее 
	# этому ключу. Если ключ отсутствует, создается новый элемент со 
	# значением, указанным во втором параметре, и в качестве результата
	# возвращается это значение. Если второй параметр не указан, значением 
	# нового элемента будет None

	pop(key, значение_поумалчанию)
	# удаляет элемент с указанным ключом и возвращает его значение. Если 
	# ключ отсутствует, возвращается значение из второго па­раметра. Если 
	# ключ отсутствует, и второй параметр не указан, то возбуждается 
	# исключение KeyError

	popitem()
	# удаляет произвольный элемент и возвращает кортеж из ключа и значения.
	# Если файл пустой, возбуждается исключение KeyError

	clear()
	# удаляет все элементы. Метод ничего не возвращает в качестве значения

	update()
	# добавляет элементы. Метод изменяет текущий объект и ничего не 
	# возвра­щает. Если элемент с указанным ключом уже присутствует, то его 
	# значение будет пере­записано. Примеры:
	# update(key=value)
	# update(dict)
	# update(list(typle))