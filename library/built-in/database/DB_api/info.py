DB_API ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# это спецификация, которая определяет ряд объектов и механизмов,
# необходимых для предоставления доступа к базе данных, которые 
# остаются едино­образными, какие бы адаптеры баз данных и лежащие 
# в их основе системы баз дан­ных не применялись.
# это не конкретная библиотека, а набор правил, которым подчиняются 
# отдельные модули, реализующие работу с конкретными базами данных. 
# Отдельные нюансы реализации для разных баз могут отличаться, но общие 
# принципы позволяют использовать один и тот же подход при работе с
# разными базами данных.

# документация на английском:
# https://www.python.org/dev/peps/pep-0249/


# атрибуты модуля DB_API ::::::::::::::::::::::::::::::::::::::::::::::

apilevel
# Данная строка (не представляющая собой число с плавающей точкой) 
# указывает самую высокую версию DB-API, с которой совместим данный 
# модуль, например 1.0, 2.0 и т.д. Если это обозначение отсутствует, 
# то по умолчанию принято считать, что значение равно 1.0.

threadsafety
# Эго целое число, которое может принимать следующие возможные 
# значения.
	# О. Отсутствие потоковой безопасности: применять потоки для 
	# 	 совместного до­ступа к модулю нельзя.
	# 1. Минимальная потоковая безопасность: потокам может 
	#	 предоставляться со­вместный доступ к модулю, но не к 
	#	 соединениям.
	# 2. Средняя потоковая безопасность: потокам может 
	#	 предоставляться совмест­ный доступ к модулю и соединениям, 
	#	 но не к курсорам.
	# 3. Полная потоковая безопасность: потокам может предоставляться 
	#	 совместный доступ к модулю, соединениям и к курсорам.
# Если к ресурсу предоставляется совместный доступ, то для блокировки 
# на атомар­ном уровне должны применяться примитивы синхронизации, 
# такие как спин-бло­кировки или семафоры. Применение файлов на диске 
# и глобальных переменных не обеспечивает достаточной надежности при 
# решении данной задачи и может оказать отрицательное воздействие 
# при выполнении стандартных операций с мьютексом.

paramstyle
# Спецификация DB-API померживает разнообразные способы указания того, 
# как параметры должны быть встроены в инструкцию SQL, которая в 
# конечном итоге пе­редается на сервер для выполнения. Этот строковый 
# параметр всего лишь указывает форму подстановки строки, которая 
# используется при формировании строк для за­проса или команды
# Стили параметров б азы данных paramstyle
	numeric
	# Стиль с числовым обозначением позиции (WHERE name=:1)
	named
	# Стиль с именованием (WHERE name=:name)
	pyformat
	# Преобразование формата в словарь Pythoп с помо­щью 
	# функции printf() (WHERE name=%(name)s)
	qmark
	# Стиль с вопросительными знаками (WHERE name=?)
	format
	# Преобразование формата в строку ANSIС с помо­щью функции 
	# printf() (WHERE name=%s)


connect(params)
# Доступ с помощью функций к базе данных предоставляется через объекты
# Connection. Совместимый модуль должен реализовывать функцию 
# connect(), кото­рая создает и возвращает объект Connection.
# Параметры функции connect()
	user 		# имя пользователя
	password 	# пароль
	host 		# имя хоста
	database 	# имя базы данных
	dsn			# имя источника данных
# Необходимость в использовании DSN (Data Set Number - номер набора 
# данных), а не отдельных параметров определяется главным образом тем, 
# к какой системе вы­полняется подключение. Например, если используется 
# API наподобие ODBC (Open Database Connectivity) или JDBC (Java DataBase 
# Connectivity), то с наибольшей веро­ятностью придется применять DSN, а 
# если работа осуществляется непосредственно с базой данных, то скорее 
# всего нужно будет задавать отдельные параметры реги­страции. Еще 
# одной причиной указанной ситуации является то, что в большинстве
# адаптеров баз данных не реализована помержка для DSN.
	MySQLdЬ.connect(host='dЬserv', dЬ='inv', user='smith')
	PgSQL.connect (database='sales')
	psycopg.connect(database='templatel', user='pgsql')
	gadfly.dЬapi20.connect('csrDB', '/usr/local/dataЬase')
	sqliteЗ.connect('marketing/test')



# exceptions :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Warning
# Корневой класс исключений уровня предупреждений

Error
# Корневой класс исключений уровня ошибок

	InterfaceError
	# Ошибка интерфейса базы данных (не самой базы данных)

	DatabaseError
	# Ошибка базы данных

		DataError
		# Проблемы с обрабатываемыми данными

		OperationalError
		# Ошибка во время выполнения операции с базой данных

		IntegrityError
		# Ошибка реляционной целостности базы данных

		InternalError
		# Ошибка, которая произошла в базе данных

		ProgrammingError
		# Неудачное завершение команды SQL

		NotSupportedError
		# Обнаружена неподдерживаемая операция



# connection methods :::::::::::::::::::::::::::::::::::::::::::::::::::

close()
# Закрыть соединение с базой данных

commit()
# Зафиксировать текущую транзакцию

rollback()
# Отменить текущую транзакцию

cursor()
# Создать (и возвратить) курсор или объект, подобный курсору, с 
# использо­ванием этого соединения

errorhandler(cxn, cur, errcls, errval)
# Служит в качестве обработчика для указанного курсора соединения



# cursor atributes ::::::::::::::::::::::::::::::::::::::::::::::::::::

arraysize
# Количество строк, подлежащих единовременной выборке с помо­щью 
# fetchmany(); значение по умолчанию -- 1

connection
# Соединение, в котором создан этот курсор (необязательный пара­метр)

description
# Возвращает данные об активности курсора (кортеж с 7 элемента­ми): 
# (name, type_code, display_size, internal_size, precision, scale, 
# null_ok); только параметры name и type_code являются обязательными

lastrowid
# Идентификатор последней измененной строки (необязательный параметр; 
# если идентификаторы строк не поддерживаются, приме­няется значение 
# по умолчанию None)

rowcount
# Количество строк, которые сформировала или затронула последняя по 
# времени функция execute*()

callproc(func[, args])
# Вызвать хранимую процедуру

close()
# Закрыть курсор

execute(op [, args])
# Выполнить запрос или команду базы данных

executemany(op, args)
# Действовать по принципу применения сочетания execute() и map(); 
# подготовить и выполнить запрос или команду базы данных с заданными 
# параметрами

fetchone()
# Осуществить выборку следующей строки из результатов запроса

fetchmany([size=cursor.arraysize])
# Осуществить выборку следующей партии строк с указанным разме­ром из 
# результатов запроса

fetchall()
# Осуществить выборку всех (оставшихся) строк из результатов за­проса

__iter__()
# Создать объект итератора на основе этого курсора (применение этой 
# функции не является обязательным;

messages
# Сформировать список сообщений (множество кортежей), получен­ных из 
# базы данных при выполнении курсора (применение этой функции не 
# является обязательным)

next()
# Используется итератором для выборки следующей строки из ре­зультатов 
# запроса (применение этой функции не является обязательным; 
# аналогично fetchone()

nextset()
# Перейти к следующему результирующему набору (если поддержи­вается)

rownumber
# Индекс курсора (номер строки, с отсчетом от нуля) в текущем 
# результирующем наборе (применение этой функции не является 
# обязательным)

setinputsizes(sizes)
# Задать максимально допустимый размер ввода (применение этой функции 
# является обязательным, но реализация - необязательна)

setoutputsize(size[, col])
# Задать максимально допустимый размер буфера для осуществле­ния выборки 
# столбцов с большими размерами данных (примене­ние этой функции является 
# обязательным, но реализация - необя­зательна)




# объекты и конструкторы типов :::::::::::::::::::::::::::::::::::::::::

Date(yr, mo, dy)
# Объект для значения даты

Time(hr, min, sec)
# Объект для значения времени

Timestamp(yr, mo, dy, hr, min, sec)
# Объект для значения отметки времени

DateFromTicks(ticks)
# Объект даты, для представления которого используется ко­личество 
# секунд с начала эпохи

TimeFromTicks(ticks)
# Объект времени, для представления которого используется количество 
# секунд с начала эпохи

TimestampFromTicks(ticks)
# Объект отметки времени, для представления которого ис­пользуется 
# количество секунд с начала эпохи

Binary(string)
# Объект для строкового значения Ьinary(long)

STRING
# Объект, описывающий строковые столбцы, например VARCНAR

BINARY
# Объект, описывающий столбцы (long)Ьinary, например RAW, BLOB

NUMBER
# Объект, описывающий числовые столбцы

DATETIME
# Объект, описывающий столбцы date/time

ROWID
# Объект, описывающий столбцы иденти фикаторов строк

