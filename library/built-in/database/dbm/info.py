dbm :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# dbm - общий интерфейс к вариантам базы данных DBM - dbm.gnu или 
# dbm.ndbm. Если ни один из этих модулей не установлен, будет 
# использоваться медленная, но простая реализация в модуле 
# dbm.dumb. Другими словами это просто хранилище ключ - значение

# документация на английском:
# https://docs.python.org/3/library/dbm.html

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import dbm

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

dbm.open(file, flag='r', mode=0o666)
# Открывает и возвращает хранилище
# flag - режим работы
	'r'
	# открытик существующей базы только для чтение (по умалчанию)
	'w'
	# открытие существующей базы только для запись
	'c'
	# открытие файла для записи и чтения, если файла нет, то 
	# создаст новый
	'n'
	# всегда создаёт новую, пустую базу данных, открытую для 
	# чтения и записи
# mode - устанавливает права доступа к файлу


dbm.whichdb(filename)
# Эта функция пытается угадать, какой из нескольких простых 
# модулей базы данных доступен - dbm.gnu, dbm.ndbm или dbm.dumb - 
# следует использовать для открытия данного файла.
# Возвращает одно из следующих значений: None, если файл нельзя 
# открыть, потому что он не читается или не существует; 
# пустая строка (''), если формат файла не может быть догадан; 
# или строку, содержащую требуемое имя модуля, например 
# «dbm.ndbm» или «dbm.gnu».

dbm.close()
# закрытие базы