#	///////////////////////////////////////////////////////////////
#	Индексы, срезы, итерации ......................................

#	Одномерные массивы осуществляют операции индексирования, срезов 
#	и итераций очень схожим образом с обычными списками и другими 
#	последовательностями Python (разве что удалять с помощью срезов 
#	нельзя).

	a = np.arange(10) ** 3
	a
	# array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
	
	a[1] 	# 1
	a[3:7] 	# array([ 27,  64, 125, 216])
	
	a[3:7] = 8
	a
	# array([  0,   1,   8,   8,   8,   8,   8, 343, 512, 729])
	
	a[::-1]
	# array([729, 512, 343,   8,   8,   8,   8,   8,   1,   0])
	
	del a[4:6]
	# Traceback (most recent call last):
	#   File "<input>", line 1, in <module>
	# ValueError: cannot delete array elements

	for i in a:
		print(i ** (1/3))

	# 0.0
	# 1.0
	# 2.0
	# 2.0
	# 2.0
	# 2.0
	# 2.0
	# 7.0
	# 8.0
	# 9.0

#	У многомерных массивов на каждую ось приходится один индекс. 
#	Индексы передаются в виде последовательности чисел, разделенных 
#	запятыми (то бишь, кортежами):

	b = np.array([[  0, 1, 2, 3],
					[10, 11, 12, 13],
					[20, 21, 22, 23],
					[30, 31, 32, 33],
					[40, 41, 42, 43]])

	b[2,3]  # Вторая строка, третий столбец
	# 23
	b[(2,3)]
	# 23
	b[2][3]  # Можно и так
	# 23
	b[:,2]  # Третий столбец
	# array([ 2, 12, 22, 32, 42])
	
	b[:2]  # Первые две строки
	# array([[ 0,  1,  2,  3],
    #		[10, 11, 12, 13]])
	
	b[1:3, : : ]  # Вторая и третья строки
	# array([[10, 11, 12, 13],
	#        [20, 21, 22, 23]])

#	Когда индексов меньше, чем осей, отсутствующие индексы предполагаются 
#	дополненными с помощью срезов:

	b[-1]  # Последняя строка. Эквивалентно b[-1,:]
	# array([40, 41, 42, 43])

#	b[i] можно читать как b[i, <столько символов ':', сколько нужно>]. В 
#	NumPy это также может быть записано с помощью точек, как b[i, ...].

#	Например, если x имеет ранг 5 (то есть у него 5 осей), тогда

	# x[1, 2, ...] эквивалентно x[1, 2, :, :, :],
	# x[... , 3] то же самое, что x[:, :, :, :, 3] и
	# x[4, ... , 5, :] это x[4, :, :, 5, :].

	a = np.array(([[0, 1, 2], [10, 12, 13]], [[100, 101, 102], [110, 112, 113]]))
	a.shape		# (2, 2, 3)

	a[1, ...]  # то же, что a[1, : , :] или a[1]
	# array([[100, 101, 102],
	#        [110, 112, 113]])

	c[... ,2]  # то же, что a[: , : ,2]
	# array([[  2,  13],
	#        [102, 113]])

#	Итерирование многомерных массивов начинается с первой оси:

	for row in a:
		print(row)

	# [[ 0  1  2]
	#  [10 12 13]]
	# [[100 101 102]
	#  [110 112 113]]

#	Однако, если нужно перебрать поэлементно весь массив, как если бы он был 
#	одномерным, для этого можно использовать атрибут flat:

	for el in a.flat:
		print(el)

	# 0
	# 1
	# 2
	# 10
	# 12
	# 13
	# 100
	# 101
	# 102
	# 110
	# 112
	# 113