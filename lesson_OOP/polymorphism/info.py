#	////////////////////////////////////////////////////////////
#	Полиморфизм ................................................

#	Парадигма объектно-ориентированного программирования помимо 
#	наследования включает еще одну важную особенность — полиморфизм. 
#	Слово «полиморфизм» можно перевести как «много форм». В 
#	программировании этим термином обозначают возможность 
#	использования одного и того же имени операции или метода к 
#	объектам разных классов, при этом действия, совершаемые с 
#	объектами, могут существенно различаться. Поэтому можно сказать, 
#	что у одного и того же слова много форм. Например, два разных 
#	класса могут содержать метод total, однако инструкции в методах 
#	могут предусматривать совершенно разные операции: так в классе 
#	T1 – это прибавление 10 к аргументу, а в T2 – подсчет длины 
#	строки символов. В зависимости от того, к объекту какого класса 
#	применяется метод total, выполняются те или иные инструкции.

	class T1:
		n=10
		def total(self,N):
			self.total = int(self.n) + int(N)

	class T2:
		def total(self,s):
			self.total = len(str(s))

	t1 = T1()
	t2 = T2()
	t1.total(45)
	t2.total(45)

	print (t1.total) # 55
	print (t2.total) # 2