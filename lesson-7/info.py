# 	////////////////////////////////////////////////////////////
# 	Функции (function). ////////////////////////////////////////

	def add(a, b): # def (create function)
		return a + b

	add(a, b) # call function

# 		Функция может и не заканчиваться инструкцией return, 
#	при этом функция вернет значение None:

# 	Аргументы //////////////////////////////////////////////////

# 		Функция может принимать произвольное количество аргументов 
# 	или не принимать их вовсе. Также распространены функции с 
#	произвольным числом аргументов, функции с позиционными и 
#	именованными аргументами, обязательными и необязательными.

	def func(a, b, c = 2):	# c - необязательный аргумент
		return a + b + c
	
	func(1, 2)  # a = 1, b = 2, c = 2 (default)

# 		Функция также может принимать переменное количество 
# 	позиционных аргументов, тогда перед именем ставится *

	def func(*args):
     	return args

	func(1, 2, 3, 'abc')	# (1, 2, 3, 'abc')

# 		args - это кортеж из всех переданных аргументов функции, 
# 	и с переменной можно работать также, как и с кортежем.

# 		Функция может принимать и произвольное число именованных 
# 	аргументов, тогда перед именем ставится **

	def func(**kwargs):
		return kwargs

	func(a=1, b=2, c=3)		# {'a': 1, 'c': 3, 'b': 2}

# 	В переменной kwargs у нас хранится словарь.

# 	Анонимные функции, инструкция lambda ///////////////////////

# 		Анонимные функции могут содержать лишь одно выражение, но и 
# 	выполняются они быстрее. Анонимные функции создаются с помощью 
# 	инструкции lambda. Их не обязательно присваивать переменной, 
# 	как c инструкцией def func()

	func = lambda x, y: x + y
	(lambda x, y: x + y)(1, 2)
	(lambda x, y: x + y)('a', 'b')

#		lambda функции, в отличие от обычной, не требуется инструкция 
# 	return, а в остальном, ведет себя точно так же.

	func = lambda *args: args

# end ///////////////////////////////////////////////////////////
# ///////////////////////////////////////////////////////////////