# 	/////////////////////////////////////////////////////////////
# 	With ... as - менеджеры контекста ///////////////////////////

#	Конструкция with ... as используется для оборачивания 
#	выполнения блока инструкций менеджером контекста. Иногда это 
#	более удобная конструкция, чем try...except...finally.

#	Синтаксис конструкции with ... as:..........................

	"with" expression ["as" target] ("," expression ["as" target])* ":"
    	suite

#	Что происходит при выполнении данного блока:

#	- Выполняется выражение в конструкции with ... as.

#	- Загружается специальный метод __exit__ для дальнейшего 
#	  использования.

#	- Выполняется метод __enter__. Если конструкция with включает 
#	  в себя слово as, то возвращаемое методом __enter__ значение 
#	  записывается в переменную.

#	- Выполняется suite.

#	- Вызывается метод __exit__, причём неважно, выполнилось ли 
#	  suite или произошло исключение. В этот метод передаются 
#	  параметры исключения, если оно произошло, или во всех 
#	  аргументах значение None, если исключения не было.

#	Если в конструкции with - as было несколько выражений, то это 
#	эквивалентно нескольким вложенным конструкциям:

	with A() as a, B() as b:
    	suite

#	эквивалентно:

	with A() as a:
		with B() as b:
			suite

#	Для чего применяется конструкция with ... as? Для гарантии того, 
#	что критические функции выполнятся в любом случае. Самый 
#	распространённый пример использования этой конструкции - 
#	открытие файлов. Я уже рассказывал об открытии файлов с помощью 
#	функции open, однако конструкция with ... as, как правило, 
#	является более удобной и гарантирует закрытие файла в любом случае.

	with open('newfile.txt', 'w', encoding='utf-8') as g:
		d = int(input())
		print('1 / {} = {}'.format(d, 1 / d), file=g)

#	И можно быть увереным, что файл будет закрыт вне зависимости от 
#	того, что введёт пользователь.