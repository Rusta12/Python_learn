# 	////////////////////////////////////////////////////////////
# 	Множества (set и frozenset). ///////////////////////////////

# 	Множество в python - "контейнер", содержащий не повторяющиеся 
# 	элементы в случайном порядке.

	a = set() 	# создаём множество
	
	a = {'a', 'b', 'c', 'd'} 	# так тоже можно

#	////////////////////////////////////////////////////////////
# 	методы работы с множествами ////////////////////////////////

len(s)	
# число элементов в множестве (размер множества).

x in s 	
# принадлежит ли x множеству s.

set == other	
# все элементы set принадлежат other, все элементы other 
# принадлежат set.

set.copy()	
# копия множества.

set.isdisjoint(other) 
# True, если set и other не имеют общих элементов.

set.issubset(other)
# является ли одно помножество, подмножеством другого 

set.union(other, ...)
# объединение нескольких множеств.

set.intersection(other, ...)
# пересечение.

set.difference(other, ...) 
# множество из всех элементов set, не принадлежащие ни 
# одному из other.

set.symmetric_difference(other) 
# множество из элементов, встречающихся в одном множестве, 
# но не встречающиеся в обоих.

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
операции, непосредственно изменяющие множество:

set.update(other, ...) # объединение.

set.intersection_update(other, ...) # пересечение.

set.difference_update(other, ...) # вычитание.

set.symmetric_difference_update(other)
# множество из элементов, встречающихся в одном множестве, но не 
# встречающиеся в обоих.

set.add(elem) 	# добавляет элемент в множество.

set.remove(elem) 	# удаляет элемент из множества. KeyError, 
					# если такого элемента не существует.

set.discard(elem) 	
# удаляет элемент, если он находится в множестве.

set.pop() 
# удаляет первый элемент из множества. Так как множества не 
# упорядочены, нельзя точно сказать, какой элемент будет первым.

set.clear()		# очистка множества.

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



# :::::::::::::::
Example			# :::::::::::::::::::::
# :::::::::::::::

set('letters') # {'l', 'e', 't', 'r', 's'}

set(dict1) # {'key1', 'key2', 'key3'}

if ex & {item1, item2, ...}
# поиск по пересечению

a = {1, 2}
b = {2, 3}
a & b # {2}
a.intersection(b) # {2}

a | b # {1, 2, 3}
a.union(b) # {1, 2, 3}

a - b # {1}
a.difference(b) # {1}
b.difference(a) # {3}

a ^ b # {1, 3}
a.symmetric_difference(b) # {1, 3}

a <= b # False
a.issubset(b) # False
