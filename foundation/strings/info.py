# 	////////////////////////////////////////////////////////
# 	Строки /////////////////////////////////////////////////

# 	упорядоченные последовательности символов, используемые 
# 	для хранения и представления текстовой информации, 
# 	поэтому с помощью строк можно работать со всем, что 
# 	может быть представлено в текстовой форме.

# 	для длиного текста применяются ('''example''')

	test = '''jwejwegr 2364527 sdjfhgsjdf
 			5142315341341 764524726425273
 			jsdfhgsjfgsjsfdhsdfhsdfgjshsj
 	   	   '''

# 	Форматирование строк. //////////////////////////////////

# 	Иногда возникают ситуации, когда нужно сделать строку, 
# 	подставив в неё некоторые данные, полученные в процессе 
# 	выполнения программы (пользовательский ввод, данные 
# 	из файлов и т. д.). Подстановку данных можно сделать 
# 	с помощью форматирования строк. Форматирование можно сделать 
# 	с помощью оператора %, либо с помощью метода format.

	"test: {test[0]}".format(test = [test0, test1, test2, test3])

	'{2},{0},{1}'.format('a', 'b', 'c')

	'{:.>30}'.format('text') # '..........................text'
	'{:.<30}'.format('text') # 'text..........................'

	'{:.^30}'.format('center') # '............center............'


# 	/////////////////////////////////////////////////////////////
#	Методы работы со строками. //////////////////////////////////

len(text)
# длина строки

text.find('first') 
# возвращает индекс первого найденного результата или -1, 
# если поиск не увенчался успехом

text.rfind('last')
# возвращает индекс последней найденной подстроки

text.replace('a', 'b', 5)
# производит глобальный поиск с заменой 5 совподений

', '.join(['ex1', 'ex2', 'ex3'])
# склеить список в одну строку с ', ' между элементами

text.split(‘,’) 
# Разбивает строку по разделителю и создает список строк

text.strip('.')
# удаляем точки с обеех концов строки

text.rstrip('sdf.') 
# удаляет символы в конце строки

text.lstrip('text')
# удаляет символы в начале строки

text[27]
# обращение по индексу

text[3:8]
# делаем срез по индексу от, до

text[1:27:2]
# делаем срез с шагом

text.isdigit()
# состоит ли строка только из цифр

text.isalpha()
# состоит ли строка только из букв

text.isalnum()
# состоит ли строка из цифр и букв

text.islower()
# сотсоит ли строка из символов в нижнем регистре

text.isupper()
# состоит ли строка из символов в верхнем регистре

text.isdecimal()
# возвращает значение True, если строка состаит только из
# цифровых символов и не является пустой

text.isspace()
# возвращает значение True, если строка состоит только из
# символов пробела, табуляции, новой строки и не является 
# пустой

text.istitle()
# возвращает значение True, если строка состоит только из
# слов, которые начинаются с буквы в верхнем регистре, за
# которой следует буквы только в нижнем регистре

text.upper()
# преобразование строки к верхнему регистру

text.lower()
# преобразование строки к нижнему регистру

text.capitalize()	
# переводит первый символ строки в верхний регистр, 
# а все остальные в нижний

text.title()
# перевести первую букву всех слов в строке в верхний
# регистр

text.swapcase()
# смена регистра букв на противоположный

text.startswith('Example')
# возвращает True, если строка начинается со слова
# 'Example'

text.endswith('and') # True
# возвращает True, если строка заканчивается 
# словом 'and'

text.center(30)
# отцентровка строки в промежутке из 30 пробелов

text.ljust(30)
# выровнить строку по левому краю

text.rjust(30)
# выровнить строку по праваму краю

min('text')
# определяет и возвращает символ с наименьшим значением

max('text')
# возвращает символ с наибольшим значением

text.count('ex')
# определяет кол-во вхождений подстроки в строку

