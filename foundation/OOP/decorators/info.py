decorators :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# 

# документация на английском:
# 

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

@staticmethod
# Внутри класса можно создать метод, который будет доступен без создания 
# экземпляра класса (статический метод). Для этого перед определением 
# метода внутри класса следует указать декоратор @staticmethod. Вызов 
# статического метода без создания экземпляра клас­са осуществляется 
# следующим образом: 'Название класса.Название метода(Параметры)'
# Кроме того, можно вызвать статический метод через экземпляр класса:
# 'Экземпляр класса.Название метода(Параметры)'.
# в определении статического метода нет параметра self. Это означает, что 
# внутри статического метода нет доступа к атрибутам и методам экземпляра
# класса

@classmethod
# Методы класса создаются с помощью декоратора @classmethod. В качестве 
# первого пара­метра в метод класса передается ссылка на класс, а не на 
# экземпляр класса. Вызов метода класса осуществляется следующим образом:
# 'Название класса.Название метода(Параметры)'
# Кроме того, можно вызвать метод класса через экземпляр класса:
# 'Экземпляр класса.Название метода(Параметры)'

@abstractmethod
# В состав стандартной библиотеки входит модуль аbс. В этом модуле определен 
# декоратор @abstractmethod, который позволяет указать, что метод, перед 
# которым расположен декоратор, является абстрактным. При попытке создать 
# экземпляр класса-потомка, в котором не переопределен абстрактный метод, 
# возбуждается исключение TypeError.

@property
# Позволяет использовать методы в качестве свойств объектов — порождает 
# дескриптор, позволяющий создавать «вычисляемые» свойства (тип property)
# Используя функцию в качестве декоратора можно легко создавать вычисляемые 
# свойства только для чтения

	@property.setter
	# вычисляемые свойства только для записи

	@property.deleter
	# вычисляемые свойства только для удаления

@unique
# Чтобы объявить, что перечисление может хранить лишь уникальные значения, 
# можно использовать декоратор unique, определенный в модуле enum
# Если мы попытаемся определить в классе, для которого был указан декоратор 
# unique, эле­менты с одинаковыми значениями, то получим сообщение об ошибке.
